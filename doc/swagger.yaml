openapi: 3.0.3
info:
  title: T.W.I.N API - Ticket Workflow Integration Network
  description: |
    T.W.I.N (Ticket Workflow Integration Network) is a service designed to handle Jira webhooks and synchronize ticket workflows.

    This API provides endpoints for:
    - Receiving and processing Jira webhooks
    - Health monitoring
    - Testing connectivity

    **Author**: Pandor
    **Organization**: Aincrad-Flux
  version: 1.0.0
  contact:
    name: Aincrad-Flux
    url: https://github.com/Aincrad-Flux/TWIN
  license:
    name: ISC
    url: https://opensource.org/licenses/ISC

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://devgoblin.me
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the current health status of the T.W.I.N service
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "OK"
                service: "T.W.I.N"
                timestamp: "2025-08-06T10:30:00.000Z"

  /webhooks/jira:
    post:
      summary: Jira webhook endpoint
      description: |
        Receives and processes Jira webhooks for issue events.

        Supported webhook events:
        - `jira:issue_created` - When a new issue is created
        - `jira:issue_updated` - When an issue is updated
        - `comment_created` - When a comment is added to an issue

        The endpoint validates the request and processes it asynchronously.
      tags:
        - Webhooks
      security:
        - JiraWebhook: []
      requestBody:
        description: Jira webhook payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JiraWebhookPayload'
            examples:
              issue_created:
                summary: Issue Created Event
                value:
                  webhookEvent: "jira:issue_created"
                  timestamp: 1690540800000
                  issue:
                    key: "PROJ-123"
                    fields:
                      summary: "New bug report"
                      issuetype:
                        name: "Bug"
                      status:
                        name: "Open"
                      priority:
                        name: "High"
              issue_updated:
                summary: Issue Updated Event
                value:
                  webhookEvent: "jira:issue_updated"
                  timestamp: 1690540800000
                  issue:
                    key: "PROJ-123"
                    fields:
                      summary: "Updated bug report"
                      status:
                        name: "In Progress"
                  changelog:
                    items:
                      - field: "status"
                        fromString: "Open"
                        toString: "In Progress"
              comment_created:
                summary: Comment Created Event
                value:
                  webhookEvent: "comment_created"
                  timestamp: 1690540800000
                  issue:
                    key: "PROJ-123"
                  comment:
                    id: "10001"
                    body: "This is a new comment"
                    author:
                      displayName: "John Doe"
      responses:
        '200':
          description: Webhook successfully received and accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse'
              example:
                status: "accepted"
                timestamp: "2025-08-06T10:30:00.000Z"
        '401':
          description: Unauthorized - Invalid webhook authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid User-Agent"
                timestamp: "2025-08-06T10:30:00.000Z"
        '500':
          description: Internal server error during webhook processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Processing error"
                timestamp: "2025-08-06T10:30:00.000Z"

  /webhooks/test:
    post:
      summary: Test webhook connectivity
      description: |
        Test endpoint that validates webhook processing and logs the request.
        This endpoint accepts webhook data and logs it for testing purposes while validating the webhook authentication.
      tags:
        - Webhooks
        - Health
      security:
        - JiraWebhook: []
      requestBody:
        description: Test webhook payload (optional)
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
            example:
              test: true
              message: "Testing webhook endpoint"
      responses:
        '200':
          description: Webhook service is operational and test data logged
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResponse'
              example:
                message: "T.W.I.N Webhooks operational"
                timestamp: "2025-08-06T10:30:00.000Z"
                received: true
                bodyType: "object"
                hasBody: true
                logFile: "webhook-test-2025-08-06T10-30-00-000Z.json"
        '401':
          description: Unauthorized - Invalid webhook authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: "Invalid User-Agent"
                timestamp: "2025-08-06T10:30:00.000Z"

  # Configuration Management Routes
  /api/config/config:
    get:
      summary: Get application configuration
      description: Retrieves the current application configuration including environment settings, version, and database configuration.
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      responses:
        '200':
          description: Configuration retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
              example:
                status: "success"
                data:
                  env: "development"
                  port: "3000"
                  version: "1.0.0"
                  logLevel: "info"
                  dbHost: "localhost"
                  dbPort: "5432"
                  dbName: "twin_db"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/config/environment:
    get:
      summary: Get all environment variables
      description: Retrieves all environment variables except protected ones (like ADMIN_API_KEY).
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      responses:
        '200':
          description: Environment variables retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentResponse'
              example:
                status: "success"
                data:
                  NODE_ENV: "development"
                  PORT: "3000"
                  LOG_LEVEL: "info"
                  DB_HOST: "localhost"
                  DB_PORT: "5432"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update multiple environment variables
      description: Updates multiple environment variables at once. Protected variables cannot be modified.
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      requestBody:
        description: Environment variables to update
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            example:
              NODE_ENV: "production"
              LOG_LEVEL: "warn"
              PORT: "8080"
      responses:
        '200':
          description: Environment variables updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/config/environment/{key}:
    get:
      summary: Get specific environment variable
      description: Retrieves the value of a specific environment variable. Protected variables cannot be retrieved.
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      parameters:
        - name: key
          in: path
          required: true
          description: Environment variable key
          schema:
            type: string
          example: "NODE_ENV"
      responses:
        '200':
          description: Environment variable retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentVariableResponse'
              example:
                status: "success"
                data:
                  key: "NODE_ENV"
                  value: "development"
        '404':
          description: Environment variable not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Set specific environment variable
      description: Sets the value of a specific environment variable. Protected variables cannot be modified.
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      parameters:
        - name: key
          in: path
          required: true
          description: Environment variable key
          schema:
            type: string
          example: "LOG_LEVEL"
      requestBody:
        description: New value for the environment variable
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - value
              properties:
                value:
                  type: string
                  description: New value for the environment variable
            example:
              value: "debug"
      responses:
        '200':
          description: Environment variable updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentVariableResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete environment variable
      description: Deletes a specific environment variable. Protected variables cannot be deleted.
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      parameters:
        - name: key
          in: path
          required: true
          description: Environment variable key
          schema:
            type: string
          example: "TEMP_VAR"
      responses:
        '200':
          description: Environment variable deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Environment variable not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/config/protected-variables:
    get:
      summary: Get list of protected variables
      description: Returns the list of environment variables that are protected and cannot be retrieved or modified via API.
      tags:
        - Configuration
      security:
        - AdminApiKey: []
      responses:
        '200':
          description: Protected variables list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      protectedVariables:
                        type: array
                        items:
                          type: string
                        example: ["ADMIN_API_KEY"]
                      message:
                        type: string
                        example: "These variables cannot be retrieved or modified via API"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  # Logs Management Routes
  /api/logs/logs:
    get:
      summary: Get list of all log files
      description: Retrieves a list of all available log files with their metadata including size, modification date, and type.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      responses:
        '200':
          description: Log files list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogFilesResponse'
              example:
                status: "success"
                data:
                  files:
                    - name: "combined.log"
                      size: 15420
                      sizeFormatted: "15.06 KB"
                      modified: "2025-08-06T10:30:00.000Z"
                      type: "log"
                    - name: "2025-08-06/webhook-test-2025-08-06T12-30-40-375Z.json"
                      size: 2048
                      sizeFormatted: "2.00 KB"
                      modified: "2025-08-06T12:30:40.000Z"
                      type: "webhook"
                  total: 15
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/stats:
    get:
      summary: Get log statistics
      description: Retrieves statistics about log files including total count, size, and breakdown by type.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      responses:
        '200':
          description: Log statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogStatsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/file/{filename}:
    get:
      summary: Get content of specific log file
      description: Retrieves the content of a specific log file with optional filtering and line limiting.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: filename
          in: path
          required: true
          description: Log file name (can include subdirectories)
          schema:
            type: string
          example: "combined.log"
        - name: lines
          in: query
          description: Number of lines to retrieve
          schema:
            type: integer
          example: 50
        - name: tail
          in: query
          description: Get last N lines instead of first N lines
          schema:
            type: boolean
          example: true
        - name: filter
          in: query
          description: Filter content by keyword
          schema:
            type: string
          example: "webhook"
      responses:
        '200':
          description: Log file content retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogContentResponse'
        '403':
          description: Access denied to requested file
        '404':
          description: Log file not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/errors:
    get:
      summary: Get recent error logs
      description: Retrieves recent error logs from the error.log file.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: lines
          in: query
          description: Number of recent lines to retrieve
          schema:
            type: integer
            default: 50
          example: 100
      responses:
        '200':
          description: Error logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogContentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/combined:
    get:
      summary: Get recent combined logs
      description: Retrieves recent combined logs from the combined.log file.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: lines
          in: query
          description: Number of recent lines to retrieve
          schema:
            type: integer
            default: 100
          example: 200
      responses:
        '200':
          description: Combined logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogContentResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/search:
    get:
      summary: Search across log files
      description: Searches for a specific term across all log files with optional filtering.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query
          schema:
            type: string
          example: "webhook"
        - name: file
          in: query
          description: File pattern to filter search
          schema:
            type: string
          example: "combined"
        - name: limit
          in: query
          description: Maximum number of results
          schema:
            type: integer
            default: 100
          example: 50
        - name: case_sensitive
          in: query
          description: Case sensitive search
          schema:
            type: boolean
            default: false
          example: false
      responses:
        '200':
          description: Search completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogSearchResponse'
        '400':
          description: Missing required query parameter
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/webhooks/{date}:
    get:
      summary: Get webhook logs for specific date
      description: Retrieves webhook logs for a specific date in YYYY-MM-DD format.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: date
          in: path
          required: true
          description: Date in YYYY-MM-DD format
          schema:
            type: string
            pattern: '^\d{4}-\d{2}-\d{2}$'
          example: "2025-08-06"
      responses:
        '200':
          description: Webhook logs for date retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookLogsResponse'
        '400':
          description: Invalid date format
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/webhooks/recent:
    get:
      summary: Get recent webhook logs
      description: Retrieves webhook logs from the last 24 hours.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of files to return
          schema:
            type: integer
            default: 10
          example: 20
      responses:
        '200':
          description: Recent webhook logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookLogsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/logs/logs/cleanup:
    delete:
      summary: Clean up old log files
      description: Deletes log files older than the specified number of days.
      tags:
        - Logs
      security:
        - AdminApiKey: []
      parameters:
        - name: days
          in: query
          description: Number of days to keep (delete older files)
          schema:
            type: integer
            default: 30
          example: 7
      responses:
        '200':
          description: Log cleanup completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    HealthResponse:
      type: object
      required:
        - status
        - service
        - timestamp
      properties:
        status:
          type: string
          description: Health status of the service
          example: "OK"
        service:
          type: string
          description: Name of the service
          example: "T.W.I.N"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: "2025-08-06T10:30:00.000Z"

    WebhookResponse:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          description: Status of webhook processing
          example: "accepted"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the response
          example: "2025-08-06T10:30:00.000Z"

    TestResponse:
      type: object
      required:
        - message
        - timestamp
        - received
        - bodyType
        - hasBody
      properties:
        message:
          type: string
          description: Test message
          example: "T.W.I.N Webhooks operational"
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the response
          example: "2025-08-06T10:30:00.000Z"
        received:
          type: boolean
          description: Whether the request was received successfully
          example: true
        bodyType:
          type: string
          description: Type of the request body
          example: "object"
        hasBody:
          type: boolean
          description: Whether the request has a body
          example: true
        logFile:
          type: string
          description: Name of the log file where the request was saved (optional)
          example: "webhook-test-2025-08-06T10-30-00-000Z.json"

    ErrorResponse:
      type: object
      required:
        - error
        - timestamp
      properties:
        error:
          type: string
          description: Error message
          example: "Processing error"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the error occurred
          example: "2025-08-06T10:30:00.000Z"

    SuccessResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Operation completed successfully"

    # Configuration Schemas
    ConfigResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            env:
              type: string
              example: "development"
            port:
              type: string
              example: "3000"
            version:
              type: string
              example: "1.0.0"
            logLevel:
              type: string
              example: "info"
            dbHost:
              type: string
              example: "localhost"
            dbPort:
              type: string
              example: "5432"
            dbName:
              type: string
              example: "twin_db"

    EnvironmentResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          additionalProperties:
            type: string
          example:
            NODE_ENV: "development"
            PORT: "3000"
            LOG_LEVEL: "info"

    EnvironmentVariableResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            key:
              type: string
              example: "NODE_ENV"
            value:
              type: string
              example: "development"

    UpdateResponse:
      type: object
      required:
        - status
        - message
        - data
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Environment variables updated successfully"
        data:
          type: object
          properties:
            updated:
              type: array
              items:
                type: string
              example: ["NODE_ENV", "LOG_LEVEL"]
            total:
              type: integer
              example: 15

    # Logs Schemas
    LogFile:
      type: object
      properties:
        name:
          type: string
          example: "combined.log"
        size:
          type: integer
          example: 15420
        sizeFormatted:
          type: string
          example: "15.06 KB"
        modified:
          type: string
          format: date-time
          example: "2025-08-06T10:30:00.000Z"
        type:
          type: string
          enum: ["log", "webhook", "json"]
          example: "log"

    LogFilesResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            files:
              type: array
              items:
                $ref: '#/components/schemas/LogFile'
            total:
              type: integer
              example: 15

    LogStatsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            totalFiles:
              type: integer
              example: 15
            totalSize:
              type: integer
              example: 245760
            totalSizeFormatted:
              type: string
              example: "240.00 KB"
            byType:
              type: object
              additionalProperties:
                type: object
                properties:
                  count:
                    type: integer
                  size:
                    type: integer
                  sizeFormatted:
                    type: string
            recentActivity:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  modified:
                    type: string
                    format: date-time
                  size:
                    type: integer

    LogContentResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          oneOf:
            - type: object
              properties:
                filename:
                  type: string
                totalLines:
                  type: integer
                returnedLines:
                  type: integer
                content:
                  type: array
                  items:
                    type: string
            - type: object
              description: JSON log file content
              additionalProperties: true

    LogSearchResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            query:
              type: string
              example: "webhook"
            totalResults:
              type: integer
              example: 25
            results:
              type: array
              items:
                type: object
                properties:
                  file:
                    type: string
                    example: "combined.log"
                  line:
                    type: integer
                    example: 42
                  content:
                    type: string
                    example: "Webhook request data saved"
                  timestamp:
                    type: string
                    format: date-time

    WebhookLogsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            date:
              type: string
              example: "2025-08-06"
            files:
              type: array
              items:
                $ref: '#/components/schemas/LogFile'
            total:
              type: integer
              example: 5
            period:
              type: string
              example: "last 24 hours"

    CleanupResponse:
      type: object
      required:
        - status
        - message
        - data
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Log cleanup completed successfully"
        data:
          type: object
          properties:
            deletedCount:
              type: integer
              example: 5
            deletedSize:
              type: integer
              example: 102400
            deletedSizeFormatted:
              type: string
              example: "100.00 KB"
            remainingFiles:
              type: integer
              example: 10

    JiraWebhookPayload:
      type: object
      required:
        - webhookEvent
      properties:
        webhookEvent:
          type: string
          description: Type of Jira webhook event
          enum:
            - "jira:issue_created"
            - "jira:issue_updated"
            - "comment_created"
          example: "jira:issue_created"
        timestamp:
          type: integer
          format: int64
          description: Unix timestamp of the event
          example: 1690540800000
        issue:
          $ref: '#/components/schemas/JiraIssue'
        changelog:
          $ref: '#/components/schemas/JiraChangelog'
        comment:
          $ref: '#/components/schemas/JiraComment'

    JiraIssue:
      type: object
      properties:
        key:
          type: string
          description: Jira issue key
          example: "PROJ-123"
        id:
          type: string
          description: Jira issue ID
          example: "10001"
        fields:
          type: object
          properties:
            summary:
              type: string
              description: Issue summary
              example: "Bug in user authentication"
            issuetype:
              type: object
              properties:
                name:
                  type: string
                  example: "Bug"
            status:
              type: object
              properties:
                name:
                  type: string
                  example: "Open"
            priority:
              type: object
              properties:
                name:
                  type: string
                  example: "High"
            assignee:
              type: object
              properties:
                displayName:
                  type: string
                  example: "John Doe"
                emailAddress:
                  type: string
                  example: "john.doe@example.com"

    JiraChangelog:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Changed field name
                example: "status"
              fromString:
                type: string
                description: Previous value
                example: "Open"
              toString:
                type: string
                description: New value
                example: "In Progress"

    JiraComment:
      type: object
      properties:
        id:
          type: string
          description: Comment ID
          example: "10001"
        body:
          type: string
          description: Comment content
          example: "This issue has been resolved"
        author:
          type: object
          properties:
            displayName:
              type: string
              example: "Jane Smith"
            emailAddress:
              type: string
              example: "jane.smith@example.com"
        created:
          type: string
          format: date-time
          description: Comment creation timestamp
          example: "2025-08-06T10:30:00.000Z"

  responses:
    Unauthorized:
      description: Unauthorized - API key missing
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "API key required"
            timestamp: "2025-08-06T10:30:00.000Z"

    Forbidden:
      description: Forbidden - Invalid API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Invalid API key"
            timestamp: "2025-08-06T10:30:00.000Z"

    BadRequest:
      description: Bad Request - Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Request body must be an object with key-value pairs"
            timestamp: "2025-08-06T10:30:00.000Z"

    ServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Internal server error"
            timestamp: "2025-08-06T10:30:00.000Z"

  securitySchemes:
    JiraWebhook:
      type: apiKey
      in: header
      name: User-Agent
      description: |
        Jira webhook authentication is validated by checking the User-Agent header.
        The service expects requests from Atlassian services (User-Agent containing "Atlassian").

        Additional security validations may include:
        - IP address whitelist validation
        - HMAC signature verification (when configured)
        - Rate limiting

    AdminApiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        Admin API key for accessing configuration and logs management endpoints.

        **Header format**: `X-API-Key: your-admin-api-key`

        **Alternative format**: `Authorization: Bearer your-admin-api-key`

        This key is required for all administrative operations including:
        - Configuration management
        - Environment variables management
        - Logs access and management

        The admin API key is protected and cannot be retrieved or modified via the API.

tags:
  - name: Health
    description: Service health monitoring endpoints
  - name: Webhooks
    description: Jira webhook processing endpoints
  - name: Configuration
    description: Application configuration and environment management endpoints
  - name: Logs
    description: Log files access and management endpoints

externalDocs:
  description: Project Repository
  url: https://github.com/Aincrad-Flux/TWIN
